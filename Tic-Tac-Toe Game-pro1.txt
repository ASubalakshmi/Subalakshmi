import java.util.Scanner;

public class ConnectFour {

    public static final int ROWS = 6;
    public static final int COLS = 7;
    public static final char EMPTY = '.';
    public static final char PLAYER1 = 'X';
    public static final char PLAYER2 = 'O';

    public static void main(String[] args) {
        char[][] board = new char[ROWS][COLS];
        initializeBoard(board);

        Scanner scanner = new Scanner(System.in);
        boolean gameWon = false;
        char currentPlayer = PLAYER1;

        while (!gameWon && !isBoardFull(board)) {
            printBoard(board);
            System.out.println("Player " + currentPlayer + "'s turn.");
            int column;

            // Input validation
            while (true) {
                System.out.print("Enter column (1-7): ");
                column = scanner.nextInt() - 1;
                if (column >= 0 && column < COLS && board[0][column] == EMPTY) {
                    break;
                }
                System.out.println("Invalid column. Try again.");
            }

            int row = getAvailableRow(board, column);
            board[row][column] = currentPlayer;

            if (checkWin(board, currentPlayer)) {
                gameWon = true;
                printBoard(board);
                System.out.println("Player " + currentPlayer + " wins!");
            } else {
                currentPlayer = (currentPlayer == PLAYER1) ? PLAYER2 : PLAYER1;
            }
        }

        if (!gameWon) {
            printBoard(board);
            System.out.println("It's a draw!");
        }

        scanner.close();
    }

    public static void initializeBoard(char[][] board) {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                board[i][j] = EMPTY;
            }
        }
    }

    public static void printBoard(char[][] board) {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("1 2 3 4 5 6 7");
    }

    public static int getAvailableRow(char[][] board, int column) {
        for (int i = ROWS - 1; i >= 0; i--) {
            if (board[i][column] == EMPTY) {
                return i;
            }
        }
        return -1; // Should not reach here
    }

    public static boolean isBoardFull(char[][] board) {
        for (int j = 0; j < COLS; j++) {
            if (board[0][j] == EMPTY) {
                return false;
            }
        }
        return true;
    }

    public static boolean checkWin(char[][] board, char player) {
        return (checkHorizontal(board, player) ||
                checkVertical(board, player) ||
                checkDiagonal(board, player));
    }

    public static boolean checkHorizontal(char[][] board, char player) {
        for (int r = 0; r < ROWS; r++) {
            for (int c = 0; c < COLS - 3; c++) {
                if (board[r][c] == player && board[r][c + 1] == player &&
                        board[r][c + 2] == player && board[r][c + 3] == player) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean checkVertical(char[][] board, char player) {
        for (int c = 0; c < COLS; c++) {
            for (int r = 0; r < ROWS - 3; r++) {
                if (board[r][c] == player && board[r + 1][c] == player &&
                        board[r + 2][c] == player && board[r + 3][c] == player) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean checkDiagonal(char[][] board, char player) {
        // Check positively sloped diagonals
        for (int r = 0; r < ROWS - 3; r++) {
            for (int c = 0; c < COLS - 3; c++) {
                if (board[r][c] == player && board[r + 1][c + 1] == player &&
                        board[r + 2][c + 2] == player && board[r + 3][c + 3] == player) {
                    return true;
                }
            }
        }

        // Check negatively sloped diagonals
        for (int r = 3; r < ROWS; r++) {
            for (int c = 0; c < COLS - 3; c++) {
                if (board[r][c] == player && board[r - 1][c + 1] == player &&
                        board[r - 2][c + 2] == player && board[r - 3][c + 3] == player) {
                    return true;
                }
            }
        }

        return false;
    }
}
